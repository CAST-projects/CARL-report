[{"id":60011,"category":"Transferability","totalViolations":4054,"listOfRules":[{"id":4554,"violationName":"Ensure you review the Class design to reduce the number of Methods","violationCount":10},{"id":4556,"violationName":"Ensure you review the Class design to reduce the number of Constructors","violationCount":7},{"id":4558,"violationName":"Ensure that the classes have a resonable number of fields","violationCount":4},{"id":4560,"violationName":"Ensure that the interfaces have a reasonable number of methods","violationCount":5},{"id":4592,"violationName":"Always Prefer not hiding Static Methods to avoid unexpected behavior of your application","violationCount":0},{"id":4610,"violationName":"Prefer not using anonymous Classes for maintenance reason","violationCount":7},{"id":7220,"violationName":"Ensure to remove unused and unnecessary Java imports","violationCount":155},{"id":7388,"violationName":"Avoid artifacts having recursive calls","violationCount":6},{"id":7434,"violationName":"Ensure to overrides equals() and hashCode()","violationCount":1},{"id":7440,"violationName":"Ensure to have the exact name and signature for each method and ensure having the '@Override' annotation when you need overriding a method declared in a superclass (for JSE 5.0 or later)","violationCount":8},{"id":7838,"violationName":"Add comments into method implementation to explain what is their goal and how they work.","violationCount":2055},{"id":7842,"violationName":"Avoid large Artifacts - too many Lines of Code","violationCount":135},{"id":7846,"violationName":"Ensure your methods are commented enough to provide good understanding to other contributors","violationCount":1603},{"id":8032,"violationName":"Ensure you don't use multiple break statement in 'for' loops","violationCount":57},{"id":1020000,"violationName":"Ensure you keep simple the design of the component/module to reduce number of independent paths","violationCount":1}]},{"id":60012,"category":"Changeability","totalViolations":6059,"listOfRules":[{"id":4556,"violationName":"Ensure you review the Class design to reduce the number of Constructors","violationCount":7},{"id":4560,"violationName":"Ensure that the interfaces have a reasonable number of methods","violationCount":5},{"id":4566,"violationName":"Ensure that you have access type defined at instance variable level to control accesss","violationCount":128},{"id":4568,"violationName":"Prefer using Protected or Private Instance Variables to control the accessibility","violationCount":4},{"id":4576,"violationName":"Ensure that a getter and setter is provided for each private field","violationCount":886},{"id":4580,"violationName":"Ensure you declare the type as an interface of a more appropriate collection.","violationCount":2},{"id":4594,"violationName":"Prefer not using 'java.io.File' to avoid violating the Enterprise JavaBeans (EJB) specification","violationCount":36},{"id":4596,"violationName":"Prefer using environment file instead of using java.lang.System.getenv()","violationCount":1},{"id":4602,"violationName":"Ensure not using Fields (non static final) from other Classes to respect OO encapsulation concepts","violationCount":7},{"id":4610,"violationName":"Prefer not using anonymous Classes for maintenance reason","violationCount":7},{"id":7220,"violationName":"Ensure to remove unused and unnecessary Java imports","violationCount":155},{"id":7388,"violationName":"Avoid artifacts having recursive calls","violationCount":6},{"id":7434,"violationName":"Ensure to overrides equals() and hashCode()","violationCount":1},{"id":7714,"violationName":"Prefer not using auto-wiring to guarantee more flexibility and better performance of your application","violationCount":808},{"id":7716,"violationName":"Ensure not using/defining singleton or factory for Spring Based application","violationCount":6},{"id":7794,"violationName":"Avoid Classes with a High Public Data Ratio","violationCount":8},{"id":7838,"violationName":"Add comments into method implementation to explain what is their goal and how they work.","violationCount":2055},{"id":7846,"violationName":"Ensure your methods are commented enough to provide good understanding to other contributors","violationCount":1603},{"id":8032,"violationName":"Ensure you don't use multiple break statement in 'for' loops","violationCount":57},{"id":8102,"violationName":"Ensure not having hardcoded network resources names in the source files (JEE)","violationCount":55},{"id":1020000,"violationName":"Ensure you keep simple the design of the component/module to reduce number of independent paths","violationCount":1},{"id":1020312,"violationName":"Ensure not using anonymous functions to attach events because they are difficult to debug, maintain, test or reuse","violationCount":221}]},{"id":60013,"category":"Robustness","totalViolations":2659,"listOfRules":[{"id":2232,"violationName":"Prefer using shared error-page elements via web.xml to better control error handling","violationCount":204},{"id":4554,"violationName":"Ensure you review the Class design to reduce the number of Methods","violationCount":10},{"id":4556,"violationName":"Ensure you review the Class design to reduce the number of Constructors","violationCount":7},{"id":4558,"violationName":"Ensure that the classes have a resonable number of fields","violationCount":4},{"id":4560,"violationName":"Ensure that the interfaces have a reasonable number of methods","violationCount":5},{"id":4592,"violationName":"Always Prefer not hiding Static Methods to avoid unexpected behavior of your application","violationCount":0},{"id":4594,"violationName":"Prefer not using 'java.io.File' to avoid violating the Enterprise JavaBeans (EJB) specification","violationCount":36},{"id":4596,"violationName":"Prefer using environment file instead of using java.lang.System.getenv()","violationCount":1},{"id":4600,"violationName":"Ensure you don't use 'java.System.exit()' to know what happened when you exit your program","violationCount":8},{"id":4610,"violationName":"Prefer not using anonymous Classes for maintenance reason","violationCount":7},{"id":4656,"violationName":"Ensure to throw an exception which has been declared","violationCount":225},{"id":4696,"violationName":"Prefer using logging framework  as SLF4j instead of  'System.err' or 'System.out'","violationCount":8},{"id":4698,"violationName":"Ensure to have other ways of listing errors outside a try/catch  than 'System.err' and 'System.out'","violationCount":11},{"id":4702,"violationName":"Ensure to not use default stream(System.Err) for printStackTrace to print throwable and its stack trace in order to protect sensitive information.","violationCount":9},{"id":7220,"violationName":"Ensure to remove unused and unnecessary Java imports","violationCount":155},{"id":7388,"violationName":"Avoid artifacts having recursive calls","violationCount":6},{"id":7434,"violationName":"Ensure to overrides equals() and hashCode()","violationCount":1},{"id":7440,"violationName":"Ensure to have the exact name and signature for each method and ensure having the '@Override' annotation when you need overriding a method declared in a superclass (for JSE 5.0 or later)","violationCount":8},{"id":7652,"violationName":"Ensure that exceptions  throwed in a catch block  are cached","violationCount":23},{"id":7714,"violationName":"Prefer not using auto-wiring to guarantee more flexibility and better performance of your application","violationCount":808},{"id":7716,"violationName":"Ensure not using/defining singleton or factory for Spring Based application","violationCount":6},{"id":7782,"violationName":"Avoid empty finally blocks","violationCount":6},{"id":7788,"violationName":"Avoid empty catch blocks","violationCount":70},{"id":7824,"violationName":"Always Subclass Exception and throw the subclassed Classes, do not throw the exception Exception.","violationCount":43},{"id":7862,"violationName":"Ensure you catch subclass of Exception, RuntimeException or Throwable","violationCount":558},{"id":8032,"violationName":"Ensure you don't use multiple break statement in 'for' loops","violationCount":57},{"id":8096,"violationName":"Ensure that testing floating point numbers for equality is not used as is source of imprecision","violationCount":6},{"id":8102,"violationName":"Ensure not having hardcoded network resources names in the source files (JEE)","violationCount":55},{"id":8216,"violationName":"Ensure not using incorrect numeric type conversions to avoid data corruption","violationCount":8},{"id":8220,"violationName":"Prefer not using deprecated methods, constructors, fields, type or packages","violationCount":9},{"id":1020000,"violationName":"Ensure you keep simple the design of the component/module to reduce number of independent paths","violationCount":1},{"id":1020066,"violationName":"Ensure to not use Javascript Function constructor calling a string represented source code to prevent impaired performance","violationCount":1},{"id":1020102,"violationName":"Always use JSON.parse &amp; JSON.stringify with try/catch block because of the synchronous call(Javascript)","violationCount":2},{"id":1020312,"violationName":"Ensure not using anonymous functions to attach events because they are difficult to debug, maintain, test or reuse","violationCount":221},{"id":1020318,"violationName":"Ensure you don't use officially jQuery deprecated methods","violationCount":4},{"id":1020340,"violationName":"Ensure you have implemented expected $ajax callbacks","violationCount":76}]},{"id":60014,"category":"Performance","totalViolations":1177,"listOfRules":[{"id":4618,"violationName":"Ensure that the boolean are not instantiated","violationCount":6},{"id":7196,"violationName":"Ensure to use StringBuffer and StringBuffer.append() method instead","violationCount":61},{"id":7200,"violationName":"Ensure to create a StringBuilder or StringBuffer before entering the loop","violationCount":16},{"id":7204,"violationName":"Avoid method invocation in a loop termination expression","violationCount":5},{"id":7206,"violationName":"Ensure to have polymorphism over 'is' operator and downcasting","violationCount":1},{"id":7210,"violationName":"Ensure to not do object initialization inside a loop since it reduces performance","violationCount":124},{"id":7562,"violationName":"Ensure that static Field of type collection are not used","violationCount":2},{"id":7734,"violationName":"Ensure that debug method invocation is usually preceded by a call to its corresponding isDebugEnabled method","violationCount":3},{"id":1020008,"violationName":"Replace for-in loop with a regular for loop with index to avoid slower performance","violationCount":1},{"id":1020020,"violationName":"Use asynchronous loading of Javascript files or code to avoid a single point of failure in page loading","violationCount":24},{"id":1020092,"violationName":"Move JavaScript functions from HTML file to a '.js' file","violationCount":227},{"id":1020308,"violationName":"Always cache your jQuery selector, based on class, returned objects in variables for reuse.","violationCount":694},{"id":1020314,"violationName":"Ensure you don't manipulate stylesheet with css() method to avoid performance issue","violationCount":13}]},{"id":60015,"category":"SEI Maintainability","totalViolations":0,"listOfRules":[]},{"id":60016,"category":"Security","totalViolations":2588,"listOfRules":[{"id":2232,"violationName":"Prefer using shared error-page elements via web.xml to better control error handling","violationCount":204},{"id":4566,"violationName":"Ensure that you have access type defined at instance variable level to control accesss","violationCount":128},{"id":4594,"violationName":"Prefer not using 'java.io.File' to avoid violating the Enterprise JavaBeans (EJB) specification","violationCount":36},{"id":4596,"violationName":"Prefer using environment file instead of using java.lang.System.getenv()","violationCount":1},{"id":4600,"violationName":"Ensure you don't use 'java.System.exit()' to know what happened when you exit your program","violationCount":8},{"id":4602,"violationName":"Ensure not using Fields (non static final) from other Classes to respect OO encapsulation concepts","violationCount":7},{"id":4618,"violationName":"Ensure that the boolean are not instantiated","violationCount":6},{"id":4656,"violationName":"Ensure to throw an exception which has been declared","violationCount":225},{"id":4696,"violationName":"Prefer using logging framework  as SLF4j instead of  'System.err' or 'System.out'","violationCount":8},{"id":4698,"violationName":"Ensure to have other ways of listing errors outside a try/catch  than 'System.err' and 'System.out'","violationCount":11},{"id":4702,"violationName":"Ensure to not use default stream(System.Err) for printStackTrace to print throwable and its stack trace in order to protect sensitive information.","violationCount":9},{"id":7196,"violationName":"Ensure to use StringBuffer and StringBuffer.append() method instead","violationCount":61},{"id":7562,"violationName":"Ensure that static Field of type collection are not used","violationCount":2},{"id":7652,"violationName":"Ensure that exceptions  throwed in a catch block  are cached","violationCount":23},{"id":7734,"violationName":"Ensure that debug method invocation is usually preceded by a call to its corresponding isDebugEnabled method","violationCount":3},{"id":7740,"violationName":"Avoid HTTP response splitting","violationCount":3},{"id":7742,"violationName":"Ensure you don't unsanitized queries to SQL databases","violationCount":24},{"id":7752,"violationName":"Ensure you do file path manipulation without including untrusted data","violationCount":4},{"id":7782,"violationName":"Avoid empty finally blocks","violationCount":6},{"id":7788,"violationName":"Avoid empty catch blocks","violationCount":70},{"id":7794,"violationName":"Avoid Classes with a High Public Data Ratio","violationCount":8},{"id":7824,"violationName":"Always Subclass Exception and throw the subclassed Classes, do not throw the exception Exception.","violationCount":43},{"id":7862,"violationName":"Ensure you catch subclass of Exception, RuntimeException or Throwable","violationCount":558},{"id":8044,"violationName":"Ensure when you build a log that accepts a format string as an argument, the argument has been sanitized when it originates from an external source.","violationCount":129},{"id":8096,"violationName":"Ensure that testing floating point numbers for equality is not used as is source of imprecision","violationCount":6},{"id":8098,"violationName":"Ensure when you use a function that accepts a format string as an argument, the argument has been sanitized when it originates from an external source.","violationCount":2},{"id":8102,"violationName":"Ensure not having hardcoded network resources names in the source files (JEE)","violationCount":55},{"id":8216,"violationName":"Ensure not using incorrect numeric type conversions to avoid data corruption","violationCount":8},{"id":8220,"violationName":"Prefer not using deprecated methods, constructors, fields, type or packages","violationCount":9},{"id":8238,"violationName":"Avoid mixing trusted and untrusted data in HTTP requests","violationCount":24},{"id":8240,"violationName":"Ensure you have secured your cookie by enabling 'Secure' attribute","violationCount":6},{"id":8408,"violationName":"Ensure you don't use user input without validation","violationCount":134},{"id":1020020,"violationName":"Use asynchronous loading of Javascript files or code to avoid a single point of failure in page loading","violationCount":24},{"id":1020030,"violationName":"Protect your page from Cross Site Scripting by making sure you don't use javascript and expressions in your CSS files","violationCount":378},{"id":1020060,"violationName":"Ensure you remove console.log() in your production code","violationCount":17},{"id":1020066,"violationName":"Ensure to not use Javascript Function constructor calling a string represented source code to prevent impaired performance","violationCount":1},{"id":1020092,"violationName":"Move JavaScript functions from HTML file to a '.js' file","violationCount":227},{"id":1020102,"violationName":"Always use JSON.parse &amp; JSON.stringify with try/catch block because of the synchronous call(Javascript)","violationCount":2},{"id":1020318,"violationName":"Ensure you don't use officially jQuery deprecated methods","violationCount":4},{"id":1020320,"violationName":"Ensure you don't use jQuery $.cookie because it is deprecated","violationCount":15},{"id":1020322,"violationName":"Ensure you use Ajax method with dataType with jQuery version older than 3.0.0","violationCount":23},{"id":1020340,"violationName":"Ensure you have implemented expected $ajax callbacks","violationCount":76}]},{"id":60017,"category":"Technical Quality Index","totalViolations":9566,"listOfRules":[{"id":2232,"violationName":"Prefer using shared error-page elements via web.xml to better control error handling","violationCount":204},{"id":4554,"violationName":"Ensure you review the Class design to reduce the number of Methods","violationCount":10},{"id":4556,"violationName":"Ensure you review the Class design to reduce the number of Constructors","violationCount":7},{"id":4558,"violationName":"Ensure that the classes have a resonable number of fields","violationCount":4},{"id":4560,"violationName":"Ensure that the interfaces have a reasonable number of methods","violationCount":5},{"id":4566,"violationName":"Ensure that you have access type defined at instance variable level to control accesss","violationCount":128},{"id":4568,"violationName":"Prefer using Protected or Private Instance Variables to control the accessibility","violationCount":4},{"id":4576,"violationName":"Ensure that a getter and setter is provided for each private field","violationCount":886},{"id":4580,"violationName":"Ensure you declare the type as an interface of a more appropriate collection.","violationCount":2},{"id":4592,"violationName":"Always Prefer not hiding Static Methods to avoid unexpected behavior of your application","violationCount":0},{"id":4594,"violationName":"Prefer not using 'java.io.File' to avoid violating the Enterprise JavaBeans (EJB) specification","violationCount":36},{"id":4596,"violationName":"Prefer using environment file instead of using java.lang.System.getenv()","violationCount":1},{"id":4600,"violationName":"Ensure you don't use 'java.System.exit()' to know what happened when you exit your program","violationCount":8},{"id":4602,"violationName":"Ensure not using Fields (non static final) from other Classes to respect OO encapsulation concepts","violationCount":7},{"id":4610,"violationName":"Prefer not using anonymous Classes for maintenance reason","violationCount":7},{"id":4618,"violationName":"Ensure that the boolean are not instantiated","violationCount":6},{"id":4656,"violationName":"Ensure to throw an exception which has been declared","violationCount":225},{"id":4696,"violationName":"Prefer using logging framework  as SLF4j instead of  'System.err' or 'System.out'","violationCount":8},{"id":4698,"violationName":"Ensure to have other ways of listing errors outside a try/catch  than 'System.err' and 'System.out'","violationCount":11},{"id":4702,"violationName":"Ensure to not use default stream(System.Err) for printStackTrace to print throwable and its stack trace in order to protect sensitive information.","violationCount":9},{"id":7196,"violationName":"Ensure to use StringBuffer and StringBuffer.append() method instead","violationCount":61},{"id":7200,"violationName":"Ensure to create a StringBuilder or StringBuffer before entering the loop","violationCount":16},{"id":7204,"violationName":"Avoid method invocation in a loop termination expression","violationCount":5},{"id":7206,"violationName":"Ensure to have polymorphism over 'is' operator and downcasting","violationCount":1},{"id":7210,"violationName":"Ensure to not do object initialization inside a loop since it reduces performance","violationCount":124},{"id":7220,"violationName":"Ensure to remove unused and unnecessary Java imports","violationCount":155},{"id":7388,"violationName":"Avoid artifacts having recursive calls","violationCount":6},{"id":7434,"violationName":"Ensure to overrides equals() and hashCode()","violationCount":1},{"id":7440,"violationName":"Ensure to have the exact name and signature for each method and ensure having the '@Override' annotation when you need overriding a method declared in a superclass (for JSE 5.0 or later)","violationCount":8},{"id":7562,"violationName":"Ensure that static Field of type collection are not used","violationCount":2},{"id":7652,"violationName":"Ensure that exceptions  throwed in a catch block  are cached","violationCount":23},{"id":7714,"violationName":"Prefer not using auto-wiring to guarantee more flexibility and better performance of your application","violationCount":808},{"id":7716,"violationName":"Ensure not using/defining singleton or factory for Spring Based application","violationCount":6},{"id":7734,"violationName":"Ensure that debug method invocation is usually preceded by a call to its corresponding isDebugEnabled method","violationCount":3},{"id":7740,"violationName":"Avoid HTTP response splitting","violationCount":3},{"id":7742,"violationName":"Ensure you don't unsanitized queries to SQL databases","violationCount":24},{"id":7752,"violationName":"Ensure you do file path manipulation without including untrusted data","violationCount":4},{"id":7782,"violationName":"Avoid empty finally blocks","violationCount":6},{"id":7788,"violationName":"Avoid empty catch blocks","violationCount":70},{"id":7794,"violationName":"Avoid Classes with a High Public Data Ratio","violationCount":8},{"id":7824,"violationName":"Always Subclass Exception and throw the subclassed Classes, do not throw the exception Exception.","violationCount":43},{"id":7838,"violationName":"Add comments into method implementation to explain what is their goal and how they work.","violationCount":2055},{"id":7842,"violationName":"Avoid large Artifacts - too many Lines of Code","violationCount":135},{"id":7846,"violationName":"Ensure your methods are commented enough to provide good understanding to other contributors","violationCount":1603},{"id":7862,"violationName":"Ensure you catch subclass of Exception, RuntimeException or Throwable","violationCount":558},{"id":8032,"violationName":"Ensure you don't use multiple break statement in 'for' loops","violationCount":57},{"id":8044,"violationName":"Ensure when you build a log that accepts a format string as an argument, the argument has been sanitized when it originates from an external source.","violationCount":129},{"id":8096,"violationName":"Ensure that testing floating point numbers for equality is not used as is source of imprecision","violationCount":6},{"id":8098,"violationName":"Ensure when you use a function that accepts a format string as an argument, the argument has been sanitized when it originates from an external source.","violationCount":2},{"id":8102,"violationName":"Ensure not having hardcoded network resources names in the source files (JEE)","violationCount":55},{"id":8216,"violationName":"Ensure not using incorrect numeric type conversions to avoid data corruption","violationCount":8},{"id":8220,"violationName":"Prefer not using deprecated methods, constructors, fields, type or packages","violationCount":9},{"id":8238,"violationName":"Avoid mixing trusted and untrusted data in HTTP requests","violationCount":24},{"id":8240,"violationName":"Ensure you have secured your cookie by enabling 'Secure' attribute","violationCount":6},{"id":8408,"violationName":"Ensure you don't use user input without validation","violationCount":134},{"id":1020000,"violationName":"Ensure you keep simple the design of the component/module to reduce number of independent paths","violationCount":1},{"id":1020008,"violationName":"Replace for-in loop with a regular for loop with index to avoid slower performance","violationCount":1},{"id":1020020,"violationName":"Use asynchronous loading of Javascript files or code to avoid a single point of failure in page loading","violationCount":24},{"id":1020030,"violationName":"Protect your page from Cross Site Scripting by making sure you don't use javascript and expressions in your CSS files","violationCount":378},{"id":1020060,"violationName":"Ensure you remove console.log() in your production code","violationCount":17},{"id":1020066,"violationName":"Ensure to not use Javascript Function constructor calling a string represented source code to prevent impaired performance","violationCount":1},{"id":1020092,"violationName":"Move JavaScript functions from HTML file to a '.js' file","violationCount":227},{"id":1020102,"violationName":"Always use JSON.parse &amp; JSON.stringify with try/catch block because of the synchronous call(Javascript)","violationCount":2},{"id":1020308,"violationName":"Always cache your jQuery selector, based on class, returned objects in variables for reuse.","violationCount":694},{"id":1020312,"violationName":"Ensure not using anonymous functions to attach events because they are difficult to debug, maintain, test or reuse","violationCount":221},{"id":1020314,"violationName":"Ensure you don't manipulate stylesheet with css() method to avoid performance issue","violationCount":13},{"id":1020318,"violationName":"Ensure you don't use officially jQuery deprecated methods","violationCount":4},{"id":1020320,"violationName":"Ensure you don't use jQuery $.cookie because it is deprecated","violationCount":15},{"id":1020322,"violationName":"Ensure you use Ajax method with dataType with jQuery version older than 3.0.0","violationCount":23},{"id":1020340,"violationName":"Ensure you have implemented expected $ajax callbacks","violationCount":76}]},{"id":66031,"category":"Programming Practices","totalViolations":4730,"listOfRules":[{"id":2232,"violationName":"Prefer using shared error-page elements via web.xml to better control error handling","violationCount":204},{"id":4554,"violationName":"Ensure you review the Class design to reduce the number of Methods","violationCount":10},{"id":4556,"violationName":"Ensure you review the Class design to reduce the number of Constructors","violationCount":7},{"id":4558,"violationName":"Ensure that the classes have a resonable number of fields","violationCount":4},{"id":4560,"violationName":"Ensure that the interfaces have a reasonable number of methods","violationCount":5},{"id":4566,"violationName":"Ensure that you have access type defined at instance variable level to control accesss","violationCount":128},{"id":4568,"violationName":"Prefer using Protected or Private Instance Variables to control the accessibility","violationCount":4},{"id":4576,"violationName":"Ensure that a getter and setter is provided for each private field","violationCount":886},{"id":4580,"violationName":"Ensure you declare the type as an interface of a more appropriate collection.","violationCount":2},{"id":4592,"violationName":"Always Prefer not hiding Static Methods to avoid unexpected behavior of your application","violationCount":0},{"id":4600,"violationName":"Ensure you don't use 'java.System.exit()' to know what happened when you exit your program","violationCount":8},{"id":4602,"violationName":"Ensure not using Fields (non static final) from other Classes to respect OO encapsulation concepts","violationCount":7},{"id":4610,"violationName":"Prefer not using anonymous Classes for maintenance reason","violationCount":7},{"id":4618,"violationName":"Ensure that the boolean are not instantiated","violationCount":6},{"id":4656,"violationName":"Ensure to throw an exception which has been declared","violationCount":225},{"id":4696,"violationName":"Prefer using logging framework  as SLF4j instead of  'System.err' or 'System.out'","violationCount":8},{"id":4698,"violationName":"Ensure to have other ways of listing errors outside a try/catch  than 'System.err' and 'System.out'","violationCount":11},{"id":4702,"violationName":"Ensure to not use default stream(System.Err) for printStackTrace to print throwable and its stack trace in order to protect sensitive information.","violationCount":9},{"id":7196,"violationName":"Ensure to use StringBuffer and StringBuffer.append() method instead","violationCount":61},{"id":7200,"violationName":"Ensure to create a StringBuilder or StringBuffer before entering the loop","violationCount":16},{"id":7204,"violationName":"Avoid method invocation in a loop termination expression","violationCount":5},{"id":7206,"violationName":"Ensure to have polymorphism over 'is' operator and downcasting","violationCount":1},{"id":7210,"violationName":"Ensure to not do object initialization inside a loop since it reduces performance","violationCount":124},{"id":7220,"violationName":"Ensure to remove unused and unnecessary Java imports","violationCount":155},{"id":7388,"violationName":"Avoid artifacts having recursive calls","violationCount":6},{"id":7434,"violationName":"Ensure to overrides equals() and hashCode()","violationCount":1},{"id":7440,"violationName":"Ensure to have the exact name and signature for each method and ensure having the '@Override' annotation when you need overriding a method declared in a superclass (for JSE 5.0 or later)","violationCount":8},{"id":7562,"violationName":"Ensure that static Field of type collection are not used","violationCount":2},{"id":7652,"violationName":"Ensure that exceptions  throwed in a catch block  are cached","violationCount":23},{"id":7734,"violationName":"Ensure that debug method invocation is usually preceded by a call to its corresponding isDebugEnabled method","violationCount":3},{"id":7740,"violationName":"Avoid HTTP response splitting","violationCount":3},{"id":7742,"violationName":"Ensure you don't unsanitized queries to SQL databases","violationCount":24},{"id":7752,"violationName":"Ensure you do file path manipulation without including untrusted data","violationCount":4},{"id":7782,"violationName":"Avoid empty finally blocks","violationCount":6},{"id":7788,"violationName":"Avoid empty catch blocks","violationCount":70},{"id":7794,"violationName":"Avoid Classes with a High Public Data Ratio","violationCount":8},{"id":7824,"violationName":"Always Subclass Exception and throw the subclassed Classes, do not throw the exception Exception.","violationCount":43},{"id":7842,"violationName":"Avoid large Artifacts - too many Lines of Code","violationCount":135},{"id":7862,"violationName":"Ensure you catch subclass of Exception, RuntimeException or Throwable","violationCount":558},{"id":8032,"violationName":"Ensure you don't use multiple break statement in 'for' loops","violationCount":57},{"id":8044,"violationName":"Ensure when you build a log that accepts a format string as an argument, the argument has been sanitized when it originates from an external source.","violationCount":129},{"id":8098,"violationName":"Ensure when you use a function that accepts a format string as an argument, the argument has been sanitized when it originates from an external source.","violationCount":2},{"id":8238,"violationName":"Avoid mixing trusted and untrusted data in HTTP requests","violationCount":24},{"id":8240,"violationName":"Ensure you have secured your cookie by enabling 'Secure' attribute","violationCount":6},{"id":8408,"violationName":"Ensure you don't use user input without validation","violationCount":134},{"id":1020000,"violationName":"Ensure you keep simple the design of the component/module to reduce number of independent paths","violationCount":1},{"id":1020008,"violationName":"Replace for-in loop with a regular for loop with index to avoid slower performance","violationCount":1},{"id":1020020,"violationName":"Use asynchronous loading of Javascript files or code to avoid a single point of failure in page loading","violationCount":24},{"id":1020030,"violationName":"Protect your page from Cross Site Scripting by making sure you don't use javascript and expressions in your CSS files","violationCount":378},{"id":1020060,"violationName":"Ensure you remove console.log() in your production code","violationCount":17},{"id":1020092,"violationName":"Move JavaScript functions from HTML file to a '.js' file","violationCount":227},{"id":1020102,"violationName":"Always use JSON.parse &amp; JSON.stringify with try/catch block because of the synchronous call(Javascript)","violationCount":2},{"id":1020308,"violationName":"Always cache your jQuery selector, based on class, returned objects in variables for reuse.","violationCount":694},{"id":1020314,"violationName":"Ensure you don't manipulate stylesheet with css() method to avoid performance issue","violationCount":13},{"id":1020320,"violationName":"Ensure you don't use jQuery $.cookie because it is deprecated","violationCount":15},{"id":1020340,"violationName":"Ensure you have implemented expected $ajax callbacks","violationCount":76}]},{"id":66032,"category":"Architectural Design","totalViolations":1127,"listOfRules":[{"id":4594,"violationName":"Prefer not using 'java.io.File' to avoid violating the Enterprise JavaBeans (EJB) specification","violationCount":36},{"id":4596,"violationName":"Prefer using environment file instead of using java.lang.System.getenv()","violationCount":1},{"id":7714,"violationName":"Prefer not using auto-wiring to guarantee more flexibility and better performance of your application","violationCount":808},{"id":7716,"violationName":"Ensure not using/defining singleton or factory for Spring Based application","violationCount":6},{"id":8102,"violationName":"Ensure not having hardcoded network resources names in the source files (JEE)","violationCount":55},{"id":1020312,"violationName":"Ensure not using anonymous functions to attach events because they are difficult to debug, maintain, test or reuse","violationCount":221}]},{"id":66033,"category":"Documentation","totalViolations":3658,"listOfRules":[{"id":7838,"violationName":"Add comments into method implementation to explain what is their goal and how they work.","violationCount":2055},{"id":7846,"violationName":"Ensure your methods are commented enough to provide good understanding to other contributors","violationCount":1603}]}]